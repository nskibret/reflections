What happens when you initialize a repository? Why do you need to do it?

A new git repository is created. We do this in order to be able to track the history of our project using git. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

It seats between the two. The files in our working directory are not tracked as long as they are not commited. It is advisable to make commits per one logical change we make on our files. Instead of commiting one large change to our repository at once, we push individual changes to the staging area before we finally commit. That way we can do the commits stage by stage allowing us to commit only the changes we wish to commit. 

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows us to create logical time differences between files and changes stored in our current directory. That way we can manage the amount of change we want to commit at a particular time. We add to the staging area only the changes we want to commit once. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A situation where the change required is significant that we would affect the main branch in a major way. If the change we want to make has the potential to affect the entire project or introduces significant change (such as trying out a different algorithm to improve efficiency) then creating a branch will be helpful. A branch allows a new named path to be created in addition to the main path (master branch) on which we can make changes without the need to worry about affecting the main branch. 

How do the diagrams help you visualize the branch structure?

Easy to understand the branch structure through the diagram representation. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a commit that contains automatically merged contents from both branches. The merge becomes the new head and points to both branches so that we can trace all the commits from both branches. 
